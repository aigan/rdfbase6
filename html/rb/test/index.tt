[% META title='Testar'
  level=20
%]
[%
#n = get(2651938);
#d = n.rev_exclusive_domain_holder;
%]
<h1>[%# n.as_html %]</h1>
<p>[%# jump('SMS',me,run='sms_send') %]</p>
<script src="[%home%]/pf/pkg/carhartl-jquery-cookie-1.4.0/jquery.cookie.js"></script>
<script>

RDF || (RDF = {});
RDF.Base || (RDF.Base = {});
;(function( RB ) {

    var ajax_url = "http://joli.ls1.se:7788";
    var cred = { username: \$.cookie("username"), password: \$.cookie("password") };
    var nodes = {};
    var cnt = 1; // Counter of loaded nodes

    var Node = function(id){
        var props = { "id": id };
        var revprops = {};
        var obj = {};
        var revobj = {};
        this.cnt = cnt++;
        
        nodes[id] = this;
        
        this.init = function(data) {
            if( props.deferred ) { // Loading under way
                return;
            }

            props.data = data;
            props.cached = new Date();
            return;
        }
    
        this.props = function() {
            if( props.promis ) { // Loading under way
                return props.promise;
            }

            props.deferred = \$.Deferred();
            props.promise = props.deferred.promise({
            });
            
            
            if(! props.cached )
            {
                \$.getJSON( ajax_url+'/'+ props.id+'/', {
                    cred: cred,
                }).done(function( res ) {
                    props.data = res.data[0];
                    props.cached = new Date();
                    props.deferred.resolve(props.data);
                });
            } else {
                props.deferred.resolve(props.data);
            }            

            return props.promise;
        }
    
        this.revprops = function() {
            if( revprops.promise ) { // Loading under way
                return revprops.promise;
            }

            revprops.deferred = \$.Deferred();
            revprops.promise = revprops.deferred.promise({
            });

            if(! revprops.cached )
            {
                \$.getJSON( ajax_url+'/'+ props.id+'/revprops', {
                    cred: cred,
                }).done(function( res ) {
                    revprops.data = res.data[0];
                    revprops.cached = new Date();
                    revprops.deferred.resolve(revprops.data);
                });
            } else {
                revprops.deferred.resolve(revprops.data);
            }            

            return revprops.promise;
        }

        this.get = function(pred) {
            obj[pred] = obj[pred] || {};

            if( obj[pred].promise ) { // Loading under way
                return obj[pred].promise;
            }

            obj[pred].deferred = \$.Deferred();
            obj[pred].promise = obj[pred].deferred.promise({
/*
                props: function(){
                    log('in props');
                }
*/
            });

            if(! obj[pred].cached )
            {
                var cached = new Date();

                \$.getJSON( ajax_url+'/'+ props.id+'/get/'+pred, {
                    cred: cred,
                }).done(function( res ) {
                    var data = [];
                    for( i in res.data ) {
                        var n = RB.get(res.data[i].id);
                        n.init(res.data[i]);
                        data.push( n );
                    };
                    obj[pred].data = data;
                    obj[pred].cached = cached;
                    obj[pred].deferred.resolve(obj[pred].data);
                });
            } else {
                obj[pred].deferred.resolve(obj[pred].data);
            }            

            return obj[pred].promise;
        }

        this.revget = function(pred) {
            revobj[pred] = revobj[pred] || {};

            if( revobj[pred].promise ) { // Loading under way
                return revobj[pred].promise;
            }

            revobj[pred].deferred = \$.Deferred();
            revobj[pred].promise = revobj[pred].deferred.promise({
            });

            if(! revobj[pred].cached )
            {
                var cached = new Date();

                \$.getJSON( ajax_url+'/'+ props.id+'/revget/'+pred, {
                    cred: cred,
                }).done(function( res ) {
                    var data = [];
                    for( i in res.data ) {
                        var n = RB.get(res.data[i].id);
                        n.init(res.data[i]);
                        data.push( n );
                    };
                    revobj[pred].data = data;
                    revobj[pred].cached = cached;
                    revobj[pred].deferred.resolve(revobj[pred].data);
                });
            } else {
                revobj[pred].deferred.resolve(revobj[pred].data);
            }            

            return revobj[pred].promise;
        }
    };
    
    RB.get = function(id) {
        return nodes[id] || new Node(id);
    };

})(RDF.Base);

  
jQuery(document).ready(function(){test_ready()});

function test_ready(){

    var nils = RDF.Base.get(23691202);
    nils.props().then( log );
    nils.revprops().then( log );
//    log(nils.cnt);
//    nils.get('is').then(function(l){l[0].props().then(log)});


//    nils.revget('is_persona_of').then(log);
//    nils.revget('is_persona_of').props().then(log);
    log( nils.revget('is_persona_of') );

    
    /*
    nils.props().then(
        function(n){
            log( n.desig + " still has id " + n.id);
        });

    setTimeout(function() {
        nils.props().then(
            function(n){
                log( n.desig + " still still has id " + n.id);
            });
    }, 3000 );
*/
}




</script>
<pre>
[%
#  d.as_html;
#  n.classified.is_newsletter;
#  n.obj.classified.is_newsletter;

#   n = get(55754);
#   n.name.loc();
%]
</pre>

